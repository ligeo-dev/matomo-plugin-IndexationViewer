{"version":3,"sources":["webpack://IndexationViewer/webpack/universalModuleDefinition","webpack://IndexationViewer/webpack/bootstrap","webpack://IndexationViewer/external \"CoreHome\"","webpack://IndexationViewer/external {\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"root\":\"Vue\"}","webpack://IndexationViewer/external \"CorePluginsAdmin\"","webpack://IndexationViewer/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://IndexationViewer/./plugins/IndexationViewer/vue/src/IndexationViewer/IndexationViewer.vue","webpack://IndexationViewer/./plugins/IndexationViewer/vue/src/IndexationViewer/IndexationViewer.vue?b486","webpack://IndexationViewer/./plugins/IndexationViewer/vue/src/IndexationViewer/IndexationViewer.vue?4677"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19dc__","__WEBPACK_EXTERNAL_MODULE__8bbf__","__WEBPACK_EXTERNAL_MODULE_a5a2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","currentScript","document","src","match","class","colspan","alt","content-title","translate","title","uicontrol","model-value","selectedSegment","onSelectSegment","$event","full-width","options","segments","selectedStatus","onSelectStatus","statuses","indexationStatuses","indexationStatus","index","id_archive","prettyPrintPeriod","ts_archived","isLoading","length","previousPage","style","page","nextPage","limitPerPage","data","props","type","Number","default","methods","fetchSegments","params","method","fetch","catch","error","show","message","context","then","Array","isArray","map","segment","definition","update","getIndexationStatuses","status","finally","event","onSearchKeydown","code","parse","period","period_begin_date","getPrettyString","setup","fetchIndexationStatusesAbort","queryParams","abort","AbortController","abortController","createErrorNotification","created","mounted","components","ContentBlock","Field","directives","ContentTable","render"],"mappings":"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","file":"IndexationViewer.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"CoreHome\"), require(\"vue\"), require(\"CorePluginsAdmin\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"CoreHome\", , \"CorePluginsAdmin\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"IndexationViewer\"] = factory(require(\"CoreHome\"), require(\"vue\"), require(\"CorePluginsAdmin\"));\n\telse\n\t\troot[\"IndexationViewer\"] = factory(root[\"CoreHome\"], root[\"Vue\"], root[\"CorePluginsAdmin\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__19dc__, __WEBPACK_EXTERNAL_MODULE__8bbf__, __WEBPACK_EXTERNAL_MODULE_a5a2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"plugins/IndexationViewer/vue/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fae3\");\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19dc__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;","module.exports = __WEBPACK_EXTERNAL_MODULE_a5a2__;","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    var getCurrentScript = require('@soda/get-current-script')\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __webpack_public_path__ = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport {\n  AjaxHelper,\n  ContentBlock,\n  ContentTable,\n  NotificationsStore,\n  Periods,\n  translate,\n} from 'CoreHome';\nimport { Field } from 'CorePluginsAdmin';\n\ninterface IndexationStatus {\n  id_archive: number;\n  name: string;\n  id_site: number;\n  period_begin_date: string;\n  period_end_date: string;\n  period: string;\n  ts_archived: string;\n  value: string;\n}\n\ninterface Segment {\n  definition: string,\n  name: string,\n}\n\ninterface Option {\n  key: string | number;\n  value: string;\n}\n\ninterface IndexationViewerState {\n  page: number;\n  isLoading: boolean;\n  statuses: Option[];\n  selectedStatus: string;\n  segments: Option[];\n  selectedSegment: string;\n  indexationStatuses?: IndexationStatus[];\n}\n\nexport default defineComponent({\n  // State --------------------------------------------------------------------\n  data(): IndexationViewerState {\n    return {\n      page: 1,\n      isLoading: true,\n      statuses: [\n        { key: '', value: translate('IndexationViewer_AnyStatus') },\n        { key: 'DONE_OK', value: translate('IndexationViewer_StatusDoneOK') },\n        { key: 'DONE_ERROR', value: translate('IndexationViewer_StatusDoneError') },\n        { key: 'DONE_INVALIDATED', value: translate('IndexationViewer_StatusDoneInvalidated') },\n      ],\n      selectedStatus: '',\n      segments: [],\n      selectedSegment: '',\n      indexationStatuses: [],\n    };\n  },\n  props: {\n    limitPerPage: {\n      type: Number,\n      default: 15,\n    },\n  },\n  // computed: {},\n  methods: {\n    fetchSegments() {\n      const params = {\n        method: 'IndexationViewer.getSegmentOptions',\n      };\n\n      AjaxHelper.fetch<Segment[]>(params)\n        .catch((error: Error | string) => {\n          NotificationsStore.show({\n            message: (error as Error).message || error as string,\n            context: 'error',\n            type: 'transient',\n          });\n        })\n        .then((segments) => {\n          if (Array.isArray(segments)) {\n            this.segments = segments.map((segment) => ({\n              key: segment.definition,\n              value: segment.name,\n            }));\n          }\n        });\n    },\n\n    update() {\n      this.isLoading = true;\n\n      this.indexationStatuses = [];\n      this.getIndexationStatuses({\n        segment: this.selectedSegment,\n        status: this.selectedStatus,\n        page: this.page,\n        limitPerPage: this.limitPerPage,\n      }).catch((error: Error | string) => {\n        NotificationsStore.show({\n          message: (error as Error).message || error as string,\n          context: 'error',\n          type: 'transient',\n        });\n\n        return [];\n      }).then((indexationStatuses) => {\n        this.indexationStatuses = indexationStatuses;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n\n    onSelectSegment(event: string) {\n      this.selectedSegment = event;\n      this.update();\n    },\n\n    onSelectStatus(event: string) {\n      this.selectedStatus = event;\n      this.update();\n    },\n\n    onSearchKeydown(event: KeyboardEvent) {\n      if (event.code !== 'Enter') {\n        return;\n      }\n\n      this.update();\n    },\n\n    previousPage() {\n      if (this.page > 0) {\n        this.page -= 1;\n        this.update();\n      }\n    },\n\n    nextPage() {\n      if (this.indexationStatuses?.length) {\n        this.page += 1;\n        this.update();\n      }\n    },\n\n    prettyPrintPeriod(indexationStatus: IndexationStatus): string {\n      return Periods.parse(indexationStatus.period, indexationStatus.period_begin_date)\n        .getPrettyString();\n    },\n  },\n  // watch: {},\n  // emits: {},\n  // expose: [],\n\n  // Lifecycle ----------------------------------------------------------------\n  setup() {\n    let fetchIndexationStatusesAbort: AbortController | null = null;\n\n    const getIndexationStatuses = (queryParams: QueryParameters) => {\n      if (fetchIndexationStatusesAbort) {\n        fetchIndexationStatusesAbort.abort();\n        fetchIndexationStatusesAbort = null;\n      }\n\n      fetchIndexationStatusesAbort = new AbortController();\n\n      const params = {\n        ...queryParams,\n        method: 'IndexationViewer.getIndexationStatuses',\n      };\n\n      const options = {\n        abortController: fetchIndexationStatusesAbort,\n        createErrorNotification: false,\n      };\n\n      return AjaxHelper.fetch<IndexationStatus[]>(params, options).finally(() => {\n        fetchIndexationStatusesAbort = null;\n      });\n    };\n\n    return {\n      getIndexationStatuses,\n    };\n  },\n  // beforeCreate() {},\n  created() {\n    this.fetchSegments();\n  },\n  // beforeMount() {},\n  mounted() {\n    this.update();\n  },\n  // beforeUpdate() {},\n  // updated() {},\n  // beforeUnmount() {},\n  // unmounted() {},\n  // errorCaptured() {},\n  // renderTracked() {},\n  // renderTriggered() {},\n  // activated() {},\n  // deactivated() {},\n  // serverPrefetch() {},\n\n  // Composition --------------------------------------------------------------\n  // provide: {},\n  // inject: {},\n  // mixins: [mixin]\n  // extends: Base,\n\n  // Misc ---------------------------------------------------------------------\n  name: 'IndexationViewer',\n  // inheritAttrs: true,\n  components: {\n    ContentBlock,\n    Field,\n  },\n  directives: {\n    ContentTable,\n  },\n});\n</script>\n\n<template>\n    <div>\n        <ContentBlock :content-title=\"translate('IndexationViewer_IndexTitle')\">\n            <div class=\"row\">\n                <div>\n                    <div class=\"segments col s4 m3 l2\">\n                        <Field :title=\"translate('IndexationViewer_SelectSegment')\"\n                               uicontrol=\"select\"\n                               name=\"selectedSegment\"\n                               :model-value=\"selectedSegment\"\n                               @update:model-value=\"onSelectSegment($event)\"\n                               :full-width=\"true\"\n                               :options=\"segments\"\n                        />\n                    </div>\n                    <div class=\"statuses col s4 m3 l2\">\n                        <Field :title=\"translate('IndexationViewer_SelectStatus')\"\n                               uicontrol=\"select\"\n                               name=\"selectedStatus\"\n                               :model-value=\"selectedStatus\"\n                               @update:model-value=\"onSelectStatus($event)\"\n                               :full-width=\"true\"\n                               :options=\"statuses\"\n                        />\n                    </div>\n                </div>\n\n                <table v-content-table>\n                    <thead>\n                    <tr>\n                        <th class=\"index\">{{ translate('General_Id') }}</th>\n                        <th class=\"name\">{{ translate('General_Name') }}</th>\n                        <th>{{ translate('IndexationViewer_Period') }}</th>\n                        <th>{{ translate('IndexationViewer_IndexedAt') }}</th>\n                        <th>{{ translate('IndexationViewer_Status') }}</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr class=\"indexationViewer-table-row\"\n                        v-for=\"(indexationStatus, index) in indexationStatuses\"\n                        :key=\"index\"\n                    >\n                        <td class=\"index\">{{ indexationStatus.id_archive }}</td>\n                        <td class=\"name\">{{ indexationStatus.name }}</td>\n                        <td>{{ prettyPrintPeriod(indexationStatus) }}</td>\n                        <td>{{ indexationStatus.ts_archived }}</td>\n                        <td>{{ indexationStatus.value }}</td>\n                    </tr>\n\n                    <tr v-if=\"!isLoading && indexationStatuses?.length === 0\">\n                        <td colspan=\"4\">\n                            {{ translate('General_SearchNoResults') }}\n                        </td>\n                    </tr>\n\n                    <tr v-show=\"isLoading\">\n                        <td colspan=\"5\">\n                            <span class=\"loadingPiwik\">\n                                <img src=\"/plugins/Morpheus/images/loading-blue.gif\" alt=\"\"/>\n                                {{ translate('General_Loading') }}\n                            </span>\n                        </td>\n                    </tr>\n\n                    <tr v-show=\"page > 1 || indexationStatuses?.length === limitPerPage\">\n                        <td colspan=\"5\" class=\"paging\">\n                            <span class=\"previous\" @click=\"previousPage()\"\n                                  style=\"padding-right: 1rem\"\n                                  v-show=\"page > 1\"\n                            >\n                                <a class=\"btn\" @click.prevent=\"\">\n                                    <span>&#xAB; {{ translate('General_Previous') }}</span>\n                                </a>\n                            </span>\n                            <span class=\"next\" @click=\"nextPage()\"\n                                  v-show=\"indexationStatuses?.length === limitPerPage\"\n                            >\n                                <a class=\"btn\" @click.prevent=\"\">\n                                    <span>{{ translate('General_Next') }} &#xBB;</span>\n                                </a>\n                            </span>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </ContentBlock>\n    </div>\n</template>\n","\nimport { defineComponent } from 'vue';\nimport {\n  AjaxHelper,\n  ContentBlock,\n  ContentTable,\n  NotificationsStore,\n  Periods,\n  translate,\n} from 'CoreHome';\nimport { Field } from 'CorePluginsAdmin';\n\ninterface IndexationStatus {\n  id_archive: number;\n  name: string;\n  id_site: number;\n  period_begin_date: string;\n  period_end_date: string;\n  period: string;\n  ts_archived: string;\n  value: string;\n}\n\ninterface Segment {\n  definition: string,\n  name: string,\n}\n\ninterface Option {\n  key: string | number;\n  value: string;\n}\n\ninterface IndexationViewerState {\n  page: number;\n  isLoading: boolean;\n  statuses: Option[];\n  selectedStatus: string;\n  segments: Option[];\n  selectedSegment: string;\n  indexationStatuses?: IndexationStatus[];\n}\n\nexport default defineComponent({\n  // State --------------------------------------------------------------------\n  data(): IndexationViewerState {\n    return {\n      page: 1,\n      isLoading: true,\n      statuses: [\n        { key: '', value: translate('IndexationViewer_AnyStatus') },\n        { key: 'DONE_OK', value: translate('IndexationViewer_StatusDoneOK') },\n        { key: 'DONE_ERROR', value: translate('IndexationViewer_StatusDoneError') },\n        { key: 'DONE_INVALIDATED', value: translate('IndexationViewer_StatusDoneInvalidated') },\n      ],\n      selectedStatus: '',\n      segments: [],\n      selectedSegment: '',\n      indexationStatuses: [],\n    };\n  },\n  props: {\n    limitPerPage: {\n      type: Number,\n      default: 15,\n    },\n  },\n  // computed: {},\n  methods: {\n    fetchSegments() {\n      const params = {\n        method: 'IndexationViewer.getSegmentOptions',\n      };\n\n      AjaxHelper.fetch<Segment[]>(params)\n        .catch((error: Error | string) => {\n          NotificationsStore.show({\n            message: (error as Error).message || error as string,\n            context: 'error',\n            type: 'transient',\n          });\n        })\n        .then((segments) => {\n          if (Array.isArray(segments)) {\n            this.segments = segments.map((segment) => ({\n              key: segment.definition,\n              value: segment.name,\n            }));\n          }\n        });\n    },\n\n    update() {\n      this.isLoading = true;\n\n      this.indexationStatuses = [];\n      this.getIndexationStatuses({\n        segment: this.selectedSegment,\n        status: this.selectedStatus,\n        page: this.page,\n        limitPerPage: this.limitPerPage,\n      }).catch((error: Error | string) => {\n        NotificationsStore.show({\n          message: (error as Error).message || error as string,\n          context: 'error',\n          type: 'transient',\n        });\n\n        return [];\n      }).then((indexationStatuses) => {\n        this.indexationStatuses = indexationStatuses;\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n\n    onSelectSegment(event: string) {\n      this.selectedSegment = event;\n      this.update();\n    },\n\n    onSelectStatus(event: string) {\n      this.selectedStatus = event;\n      this.update();\n    },\n\n    onSearchKeydown(event: KeyboardEvent) {\n      if (event.code !== 'Enter') {\n        return;\n      }\n\n      this.update();\n    },\n\n    previousPage() {\n      if (this.page > 0) {\n        this.page -= 1;\n        this.update();\n      }\n    },\n\n    nextPage() {\n      if (this.indexationStatuses?.length) {\n        this.page += 1;\n        this.update();\n      }\n    },\n\n    prettyPrintPeriod(indexationStatus: IndexationStatus): string {\n      return Periods.parse(indexationStatus.period, indexationStatus.period_begin_date)\n        .getPrettyString();\n    },\n  },\n  // watch: {},\n  // emits: {},\n  // expose: [],\n\n  // Lifecycle ----------------------------------------------------------------\n  setup() {\n    let fetchIndexationStatusesAbort: AbortController | null = null;\n\n    const getIndexationStatuses = (queryParams: QueryParameters) => {\n      if (fetchIndexationStatusesAbort) {\n        fetchIndexationStatusesAbort.abort();\n        fetchIndexationStatusesAbort = null;\n      }\n\n      fetchIndexationStatusesAbort = new AbortController();\n\n      const params = {\n        ...queryParams,\n        method: 'IndexationViewer.getIndexationStatuses',\n      };\n\n      const options = {\n        abortController: fetchIndexationStatusesAbort,\n        createErrorNotification: false,\n      };\n\n      return AjaxHelper.fetch<IndexationStatus[]>(params, options).finally(() => {\n        fetchIndexationStatusesAbort = null;\n      });\n    };\n\n    return {\n      getIndexationStatuses,\n    };\n  },\n  // beforeCreate() {},\n  created() {\n    this.fetchSegments();\n  },\n  // beforeMount() {},\n  mounted() {\n    this.update();\n  },\n  // beforeUpdate() {},\n  // updated() {},\n  // beforeUnmount() {},\n  // unmounted() {},\n  // errorCaptured() {},\n  // renderTracked() {},\n  // renderTriggered() {},\n  // activated() {},\n  // deactivated() {},\n  // serverPrefetch() {},\n\n  // Composition --------------------------------------------------------------\n  // provide: {},\n  // inject: {},\n  // mixins: [mixin]\n  // extends: Base,\n\n  // Misc ---------------------------------------------------------------------\n  name: 'IndexationViewer',\n  // inheritAttrs: true,\n  components: {\n    ContentBlock,\n    Field,\n  },\n  directives: {\n    ContentTable,\n  },\n});\n","import { render } from \"./IndexationViewer.vue?vue&type=template&id=68c20848\"\nimport script from \"./IndexationViewer.vue?vue&type=script&lang=ts\"\nexport * from \"./IndexationViewer.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}